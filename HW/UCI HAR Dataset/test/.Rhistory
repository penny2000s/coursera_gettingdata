subset3 <- data[data$Month == 5,]
summary(subset3)
#neural network
remove(list = ls())
library(nnet)
m <- nnet(Species ~., data=iris, size=3)
predict(m, newdata = iris)
log(predict(m, newdata = iris))
(predict(m, newdata = iris))
classification <- (predict(m, newdata = iris))
classification[1]
classification[2]
classification[2,1]
classification[1,3]
classification[1,2]
classification[classification > 0.5]
result <- classification[classification > 0.5]
result
result <- classification[classification < 0.5]
result
classification[classification < 0.5] = 0
classification
#neural network
remove(list = ls())
library(nnet)
m <- nnet(Species ~., data=iris, size=3)
classification <- predict(m, newdata = iris)
classificaiton
#classification[classification < 0.5] = 0
#neural network
remove(list = ls())
library(nnet)
m <- nnet(Species ~., data=iris, size=3)
classification <- predict(m, newdata = iris)
classificaiton
#classification[classification < 0.5] = 0
#neural network
remove(list = ls())
library(nnet)
m <- nnet(Species ~., data=iris, size=3)
classification <- predict(m, newdata = iris)
#classificaiton
#classification[classification < 0.5] = 0
classification
classification[classification < 0.5] = 0
classificaion
classification
# Support Vector Machine
remove(list = ls())
#install.packages("kernlab")
library(kernlab)
m <- ksvm(Species ~., data = iris)
class <- predict(m, newdata = iris)
class
#neural network
remove(list = ls())
library(nnet)
m <- nnet(Species ~., data=iris, size=3)
classification <- predict(m, newdata = iris)
#classificaiton
#classification[classification < 0.5] = 0
#neural network
remove(list = ls())
library(nnet)
m <- nnet(Species ~., data=iris, size=100)
classification <- predict(m, newdata = iris)
#classificaiton
#classification[classification < 0.5] = 0
classification
classification[classification < 0.5] = 0
classification
classification[classification < 0.5] = int(0)
classification[classification < 0.5] = 0
iris
data(PimaIndiansDiabetes)
remove(list = ls())
library(swirl)
swirl()
my_vector = [1:20]
my_vector <- [1:20]
my_vector <- c[1:20]
exit()
quit()
head(iris)
#neural network
remove(list = ls())
library(nnet)
m <- nnet(Species ~., data=iris, size=3)
classification <- predict(m, newdata = iris)
#classificaiton
#classification[classification < 0.5] = 0
classification[classification < 0.5] = 0
classification
#neural network
remove(list = ls())
library(nnet)
m <- nnet(Species ~., data=iris, size=1000)
classification <- predict(m, newdata = iris)
#classificaiton
#classification[classification < 0.5] = 0
classification[classification < 0.5] = 0
classification
#neural network
remove(list = ls())
library(nnet)
m <- nnet(Species ~., data=iris, size=100)
classification <- predict(m, newdata = iris)
#classificaiton
#classification[classification < 0.5] = 0
classification
#neural network
remove(list = ls())
library(nnet)
m <- nnet(Species ~., data=iris, size=100)
classification <- predict(m, newdata = iris)
#classificaiton
#classification[classification < 0.5] = 0
classification[classification < 0.5] = 0
classification
# Support Vector Machine
remove(list = ls())
#install.packages("kernlab")
library(kernlab)
m <- ksvm(Species ~., data = iris)
class <- predict(m, newdata = iris)
class
library(swirl)
swirl
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matric <- my_vector
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 <7
10 <= 10
5 != 7
!(5==7)
!(5 == 7)
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 >4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
swirl()
library("swirl")
library(swirl)
swirl()
head(flag)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_color)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shape <- flags[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
source("D:\(2)Study\R_Programming(Coursera)\specdata")
source("d:")
source("d:001.csv")
read.csv("d:001.csv")
pollutantmean
pollutantmean()
pollutantmean(1,1)
source('~/pollutantmean.r')
pollutantmean(1,1)
pollutantmean()
source('~/pollutantmean.r')
pollutantmean()
directory = "d:001.csv"
data = read.csv(directory)
str(data)
mean(data$sulfate)
tmp = "sulfate"
mean(data$tmp)
mean(data[1:10]$sulfate)
?mean
id = 1:5
data[id]
data[1:5]
data[,1:5]
data[1]
data[2]
data[2,1]
data[2,2]
data[1,1]
data[1:5,]
data[id,]
source('~/pollutantmean.r')
source('~/pollutantmean.r')
source('~/pollutantmean.r')
pollutantmean("specdata", "sulfate, 1:10")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("d:001.csv", "sulfate", 1:10)
source('~/pollutantmean.r')
pollutantmean("d:001.csv", "sulfate", 1:10)
pollutantmean("d:001.csv", "sulfate", 1:10)
q()
source('~/pollutantmean.r')
select.data <- data[id,]
if (pollutant == "sulfate")
my_mean <- mean(select.data$sulfate)
source('~/pollutantmean.r')
my_mean <- mean(select.data$sulfate)
my_mean <- mean(select.data$sulfate)
pollutantmean("d:001.csv", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
q()
library(swirl)
swirl()
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = "TRUE", prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flip
flips
sum(flips)
?rbinorm
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, 100, prob = 0.7)
flips2 <- rbinom(100, 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, sd = 25)
rnorm(10, mean = 100, sd = 25)
?rpois()
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
?replicate
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1 <- weekdays()
weekdays(d1)
month(t1)
months(t1)
quaters(t2)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- strptime("1986-11-17 08:24")
?strptime
skip
t3 <- strptime("October 17, 1986 09:24", format = "")
skip()
t3
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
skip()
skip()
skip()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(X:size)
select(x:size)
select(cran, -(X:size)
)
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US | country == "IN"")
filter(cran, country == "US | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size / 2^10)
mutate(cran3, size_mb = size/ 2^20, size_gb = size / 2^10)
mutate(cran3, size_mb = size/ 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
install.packages("rJava")
library(rJava)
install.packages('rJava',,'http://www.rforge.net/')
install.packages('rJava','http://www.rforge.net/')
library(rJava)
library(rJava)
install.packages("rJava")
library(rJava)
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("rJava")
library(rJava)
systemp("java -version")
system("java -version")
system("java -version")
library(rJava)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(rJava)
source('~/.active-rstudio-document')
install.packages("rJava")
library(rJava)
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(rJava)
install.packages()
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("DBI")
install.packages("RMySQL", type = "source")
library(DBI)
library(RMySQL)
install.packages("RMySQL", type = "source")
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
Sys.setenv(MYSQL_HOME='C:\Program Files\MySQL\MySQL Server 5.6')
Sys.setenv(MYSQL_HOME='C:\\Program Files\\MySQL\\MySQL Server 5.6')
install.packages("RMySQL", type = "source")
getwd()
wd <- D:\(2)Study\R\3_GettingData\L2\UCI HAR Dataset\test
wd <- "D:\(2)Study\R\3_GettingData\L2\UCI HAR Dataset\test"
wd <- "D:(2)Study/R/3_GettingData/L2/UCI HAR Dataset/test"
wd <- "D:(2)Study/R/3_GettingData/L2/UCI HAR Dataset/test"
setwd(wd)
?read.table
read.table("X_test.txt")
data.x.text <- read.table("X_test.txt")
str(data.x.test)
data.x.test <- read.table("X_test.txt")
str(data.x.test)
head(data.x.test)
str(data.x.test)
wd <- "D:(2)Study/R/3_GettingData/L2"
wd.test <- "D:(2)Study/R/3_GettingData/L2/UCI HAR Dataset/test"
setwd(wd.test)
data.x.test <- read.table("X_test.txt")
wd.train <- "D:(2)Study/R/3_GettingData/L2/UCI HAR Dataset/training"
setwd(wd.traing)
data.x.train <- read.table("X_training.txt")
setwd(wd)
wd <- "D:(2)Study/R/3_GettingData/L2"
wd.test <- "D:(2)Study/R/3_GettingData/L2/UCI HAR Dataset/test"
setwd(wd.test)
wd <- "D:(2)Study/R/3_GettingData/L2"
wd.test <- "D:(2)Study/R/3_GettingData/L2/UCI HAR Dataset/test"
setwd(wd.test)
getwd()
wd <- "D:(2)Study/R/3_GettingData/L2"
setwd(wd)
data.x.test <- read.table(""D:(2)Study/R/3_GettingData/L2/UCI HAR Dataset/test/X_test.txt")
wd <- "D:(2)Study/R/3_GettingData/L2"
setwd(wd)
data.x.test <- read.table("
remove(list = file.list())
s
>
)
""
)
